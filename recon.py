from colorama import Fore, Back, Style
import time
import os
#------------Diğer Fonksiyonlar---------------
def bosluk_silme(yazılım, komut):
    i = 0
    while True:
        if komut[i] == " ":
            regular = komut[i:].replace(" ", "_")
            os.system(komut + ">> report/" + yazılım.upper() + regular + ".txt")
            print(">>>>>Tarama sonucunuz report/ klasörüne "+yazılım.upper()+regular+ ".txt şeklinde kaydedilmiştir.\n")
            break;
        else:
            i = i + 1

def bosluk_kacis_silme(yazılım, komut):
    i = 0
    while True:

        if komut[i] == " ":
            regular = komut[i:].replace(" ", "_")
            dirbregular = regular.replace("/","")
            os.system(komut + ">> report/"+yazılım.upper()+dirbregular+".txt")
            print(">>>>>Tarama sonucunuz report/ klasörüne "+yazılım.upper()+dirbregular+ ".txt şeklinde kaydedilmiştir.\n")
            break;
        else:
            i = i + 1



#------------ Pasif Keşif Fonksiyonları -------------

def wireshark():
    print("echo wireshark başlatılıyor...")
    os.system("wireshark")

def dig():
    print(Fore.YELLOW)
    os.system("figlet DIG")
    print(Fore.RESET)
    while True:
        dig_sorgu = input(str("Dig sorgunuzu giriniz, önceki adıma gitmek için 'g' basınız (Örneğin dig abc.com): "))
        if dig_sorgu == 'g':
            print("\n")
            time.sleep(0.8)
            break;
        else:
            os.system(dig_sorgu + "| tee report/DIG_"+dig_sorgu+".txt")
            os.system("rm DIG_" + dig_sorgu + ".txt")
            print("dig sorgunuz report dosyasına kaydedilmiştir.\n")

def whoisgenel(hedefwhois):
    os.system("whois "+hedefwhois +"| tee report/WHOIS_"+hedefwhois+".txt")

def whoisparam(yazılım):

    komut = input(str("Komutu giriniz (Ornek: whois -b abc.com.tr): "))
    if komut == "whois -h":
        os.system(komut)
    else:
        os.system(komut)
        bosluk_silme(yazılım, komut)

def traceroute():
    print(Fore.YELLOW)
    os.system("figlet TRACEROUTE")
    print(Fore.RESET)
    while True:
        print("""
    1) Standart traceroute
    2) Özel komut
    3) Önceki adım""")
        traceroute_secim = input(str("Seçmek istediğiniz adım(Önceki adım için '3' ya da 'g' giriniz): "))
        print("\n")
        if traceroute_secim == '1':
            tracert_hedef = input(str("Hedef ip ya da domain: "))
            os.system("traceroute "+tracert_hedef+" | tee report/TRACERT_"+tracert_hedef+".txt")
            print("\n")
            print(">>>>> Tarama sonucu report dosyasına TRACERT_"+tracert_hedef+".txt şeklinde kaydedilmiştir.")
        elif traceroute_secim == '2':
            yazılım = "tracert"
            tracert_komut = input(str("Komutu giriniz: "))
            print("\n")
            if tracert_komut == "traceroute" or tracert_komut == "traceroute --help":
                os.system(tracert_komut)
                print("\n")
            else:
                os.system(tracert_komut)
                print("\n")
                bosluk_silme(yazılım,tracert_komut)
        elif traceroute_secim == '3' or traceroute_secim == 'g':
            time.sleep(0.5)
            print("\n")
            break;
        else:
            print(">>>>> Geçersiz girdi!!!")

def pasif_tool():
    print(Fore.YELLOW)
    os.system("PASİF TARAMA")
    print(Fore.RESET)
    while True:
        print("""Pasif keşif adımında kullanabileceğiniz araçlar ve siteler:\n
    1) Shodan(Site)
    2) Netcraft(Site)
    3) Exploit Database: Google Hacking Database(Site)
    4) SearchCode(Site)
    5) Whois(tool)
    6) Dig(tool)
    7) Wireshark(tool)
    8) Traceroute(tool)
    9) Önceki adıma dönmek için 'g' ya da '8' basınız.\n""")

        pasif = input(str("Kullanmak istediğiniz tool/site: "))
        print("\n")

        if pasif == '1':
            print(">>>>>Shodan bir araç değildir, shodan web adresi: https://www.shodan.io/\n")
            time.sleep(0.8)
        elif pasif == '2':
            print(">>>>>Netcraft bir araç değildir, netcraft web adresi: https://www.netcraft.com/tools/\n")
            time.sleep(0.8)
        elif pasif == '3':
            print(">>>>>Expliot Database bir araç değildir, exploit database web adresi: https://www.exploit-db.com/google-hacking-database\n")
            time.sleep(0.8)
        elif pasif == '4':
            print(">>>>>Searchcode bir araç değildir, searchcode  web adresi: https://searchcode.com\n")
            time.sleep(0.8)
        elif pasif == '5':
            print(Fore.YELLOW)
            os.system("figlet WHOIS")
            print(Fore.RESET)
            while True:

                whois = input(str("""
    1) Genel Sorgu
    2) Parametreli sorgu
    3) Araçlara geri dönmek için '3' ya da 'g' giriniz: """))
                if whois == '1':
                    hedefwhois = input(str("""Hedef web adresi (Ornek: abc.com.tr):  """))
                    whoisgenel(hedefwhois)
                elif whois == '2':
                    yazılım = "whois"
                    whoisparam(yazılım)
                elif whois == '3' or whois == 'g':
                    time.sleep(0.2)
                    print("\n")
                    break;
                else:
                    print("Geçersiz girdi !!!")
        elif pasif == '6':
            dig()
        elif pasif == '7':
            wireshark()
        elif pasif == '8':
            traceroute()
        elif pasif == 'g' or pasif == '9':
            break;
        else:
            print(">>>>>Geçersiz girdi!!!")
            print("\n")
            time.sleep(0.8)

# ---------- Aktif Keşif Fonksiyonları --------------
def aktif_tool():
    print(Fore.YELLOW)
    os.system("figlet AKTIF TARAMA")
    print(Fore.RESET)
    while True:
        print("""Aktif keşif adımında kullanılabileceğiniz araçlar:\n
    1) Nmap
    2) Nikto
    3) Dirb(hata var)
    4) Gobuster
    5) Sqlmap
    6) Metasploit-Framework
    7) OWASP ZAP
    8) WPScan
    9) Enum4linux
   10) Smbclient
   11) Wafw00f
   12) Arp-scan
   13) Önceki adıma dönmek için 'g' yada '12' basınız""")
        time.sleep(0.2)

        aktif = input(str("Kullanmak istediğiniz tool: "))
        print("\n")
        #nmap
        if aktif == '1':
            yazılım = "nmap"
            nmap(yazılım)
        #nikto
        elif aktif == '2':
            nikto()
        #dirb
        elif aktif == '3':
            dirb()
        #gobuster
        elif aktif == '4':
            gobuster()
        #sqlmap
        elif aktif == '5':
            sqlmap()
        #msfconsole
        elif aktif == '6':
            msfconsole()
        #owasp-zap
        elif aktif == '7':
            zap()
        #wpscan
        elif aktif == '8':
            wpscan()
        #enum4linux
        elif aktif == '9':
            enum4linux()
        #smbclient
        elif aktif == '10':
            smbclient()
        #wafw00f
        elif aktif == '11':
            wafw00f()
        #arp-scan
        elif aktif == '12':
            arp()
        elif aktif == '13' or aktif == 'g':
            time.sleep(0.3)
            break;
        else:
            print(">>>>>Geçersiz girdi!!!\n")



def nmap(yazılım):
    print(Fore.YELLOW)
    os.system("figlet NMAP")
    print(Fore.RESET)
    while True:

        print("""Seçenekler: 
        1) Standart Tarama
        2) Agresif Tarama Tarama 
        3) İşletim Sistemi Taraması
        4) Özel Tarama
        5) Önceki adım\n""")
        secenek = input(str("Seçmek istediğiniz tarama türü (Önceki adıma dönmek için 'g' ya da '5' basınız.): "))

        if secenek == '1':
            hedefip = input(str("Hedef ip'yi giriniz: "))
            os.system("sudo nmap "+hedefip +"| tee report/NMAP_"+hedefip+".txt")
            print("\n")
            print(">>>>>Tarama sonucu report dosyasına NMAP_"+hedefip+".txt şeklinde kaydedilmiştir.")
            time.sleep(0.8)
        elif secenek == '2':
            hedefip = input(str("Hedef ip'yi giriniz: "))
            os.system("sudo nmap "+hedefip+ " -A | tee report/NMAP_Agresif_"+hedefip+".txt")
            print("\n")
            print(">>>>>Tarama sonucu report dosyasına NMAP_Agresif_" + hedefip + ".txt şeklinde kaydedilmiştir.")
            time.sleep(0.8)
        elif secenek == '3':
            hedefip = input(str("Hedef ip'yi giriniz: "))
            os.system("sudo nmap "+hedefip+ " -O | tee report/NMAP_OS_"+hedefip+".txt")
            print("\n")
            print(">>>>>Tarama sonucu report dosyasına NMAP_O_"+hedefip+".txt şeklinde kaydedilmiştir.")
            time.sleep(0.8)
        elif secenek == '4':
            nmap_komut = input(str("Çalıştırmak istediğiniz komut (Örneğin: nmap -sT -v -d --reason 192.168.0.0): "))
            if nmap_komut == "nmap -h":
                os.system(nmap_komut)
            else:
                os.system("sudo "+nmap_komut)
                komut = nmap_komut
                bosluk_silme(yazılım,komut)
                time.sleep(0.8)
        elif secenek == '5' or secenek == 'g':
            time.sleep(0.5)
            break;

def nikto():
    print(Fore.YELLOW)
    os.system("figlet NIKTO")
    print(Fore.RESET)
    while True:

        print("""
        1) Standart Tarama
        2) Özel Tarama 
        3) Önceki adım\n""")
        niktosec = input(str("Seçmek istediğiniz tarama türü (Önceki adıma dönmek için 'g' ya da '3' bazınız): "))
        print("\n")
        if niktosec == '1':
            niktohedefip = input(str("Hedef ip'yi giriniz: "))
            os.system("sudo nikto -h " + niktohedefip + "| tee report/NIKTO_" + niktohedefip + ".txt")
            print("\n")
            print(">>>>>Tarama sonucu report dosyasına NIKTO_" + niktohedefip + ".txt şeklinde kaydedilmiştir.")
            time.sleep(0.8)
        elif niktosec == '2':
            yazılım = "nikto"

            nikto_komut = input(str("Komutu giriniz :"))
            if nikto_komut == "nikto -h":
                os.system(nikto_komut)
                print("\n")
            else:
                os.system("sudo "+nikto_komut)
                print("\n")
                bosluk_silme(yazılım, nikto_komut)

        elif niktosec == '3' or niktosec == 'g':
            time.sleep(0.5)
            print("\n")
            break;
        else:
            print(">>>>> Geçersiz girdi!!!")

def dirb():
    print(Fore.YELLOW)
    os.system("figlet DIRB")
    print(Fore.RESET)
    while True:
        print("""
        1) Standart Tarama
        2) Özel Tarama
        3) Önceki adım\n""")
        dirb_sec = input(str("Seçmek istediğiniz tarama türü (Önceki adıma dönmek için '3' ya da 'g' basınız): "))
        print("\n")
        if dirb_sec == '1':
            dirb_hedefip = input(str("Hedef URL'yi giriniz: "))
            regularip = dirb_hedefip.replace("/","")
            os.system("dirb " + dirb_hedefip + "| tee report/DIRB_" + regularip + ".txt")
            print("\n")
            print(">>>>>Tarama sonucu report dosyasına DIRB_" + regularip + ".txt şeklinde kaydedilmiştir.")
            time.sleep(0.8)
        elif dirb_sec == '2':
            yazılım = "dirb"

            dirb_komut = input(str("Komutu giriniz: "))
            if dirb_komut == "dirb":
                os.system(dirb_komut)
                print("\n")
            else:
                os.system(dirb_komut)
                print("\n")
                try:
                    bosluk_kacis_silme(yazılım,dirb_komut)
                except:
                    print(">>>>> Geçersiz girdi!!!")
        elif dirb_sec == '3' or dirb_sec == 'g':
            time.sleep(0.5)
            print("\n")
            break;
        else:
            print(">>>>> Geçersiz girdi!!!")

def msfconsole():
    os.system("msfconsole")

def zap():
    os.system("bash /opt/zaproxy/zap.sh")

def arp():
    print(Fore.YELLOW)
    os.system("figlet ARP")
    print(Fore.RESET)
    while True:
        print("""
            1) Standart Tarama (local ağınızdaki makineleri tarar)
            2) Özel Tarama
            3) Önceki adım\n""")
        arp_sec = input(str("Seçmek istediğiniz tarama türü (Önceki adıma dönmek için '3' ya da 'g' basınız.): "))
        print("\n")
        if arp_sec == '1':
            os.system("sudo arp-scan --localnet | tee report/ARP_GENEL.txt")
            print("\n")
            print(">>>>>Tarama sonucu report dosyasına ARP_GENEL.txt şeklinde kaydedilmiştir.")
            time.sleep(0.8)
        elif arp_sec == '2':
            yazılım = "arp"

            arp_komut = input(str("Komutu giriniz: "))
            try:
                if arp_komut == "arp --help":
                    os.system("sudo arp-scan --help")
                    print("\n")
                else:
                    os.system(arp_komut)
                    print("\n")
                    bosluk_silme(yazılım,arp_komut)
            except:
                print(">>>>> Geçersiz girdi!!!")
        elif arp_sec == '3' or arp_sec == 'g':
            time.sleep(0.5)
            print("\n")
            break;
        else:
            print(">>>>> Geçersiz girdi!!!")

def gobuster():
    print(Fore.YELLOW)
    os.system("figlet GOBUSTER")
    print(Fore.RESET)
    while True:
        print("""
            1) Standart Tarama(gobuster dir -u URL -w wordlist)
            2) Özel Tarama
            3) Önceki adım\n""")
        gobuster_sec = input(str("Seçmek istediğiniz tarama türü (Önceki adıma dönmek için '3' ya da 'g' basınız.): "))
        print("\n")
        if gobuster_sec == '1':
            try:
                gobuster_hedefurl = input(str("Hedef URL'yi giriniz(Örnek: http://192.168.0.10): "))
                regularurl = gobuster_hedefurl.replace("/","")
                os.system("gobuster dir -u"+gobuster_hedefurl+" -w /usr/share/dirb/wordlists/big.txt"+"| tee report/GOBUSTER_"+regularurl+".txt")
                print("\n")
                print(">>>>>Tarama sonucu report dosyasına GOBUSTER_" + regularurl + ".txt şeklinde kaydedilmiştir.")
                time.sleep(0.8)
            except:
                print(">>>>> Geçersiz girdi!!!")
        elif gobuster_sec == '2':
            yazılım = "gobuster"
            gobuster_komut = input(str("Komutu giriniz: "))
            try:
                if gobuster_komut == yazılım:
                    os.system(gobuster_komut)
                    print("\n")
                else:
                    os.system(gobuster_komut)
                    print("\n")
                    bosluk_kacis_silme(yazılım,gobuster_komut)
            except:
                print(">>>>> Geçersiz girdi!!!")
        elif gobuster_sec == '3' or gobuster_sec == 'g':
            time.sleep(0.5)
            print("\n")
            break;
        else:
            print(">>>>> Geçersiz girdi!!!")

def sqlmap():
    print(Fore.YELLOW)
    os.system("figlet SQLMAP")
    print(Fore.RESET)
    while True:
        sqlmap_komut = input(str("Komutu giriniz (Önceki adıma dönmek için 'g' ya da '1' basınız): "))
        print("\n")
        yazılım = "sqlmap"
        try:
            if sqlmap_komut == '1' or sqlmap_komut == 'g':
                time.sleep(0.5)
                print("\n")
                break;
            elif sqlmap_komut == "sqlmap -h" or sqlmap_komut == "sqlmap -hh":
                os.system(sqlmap_komut)
            else:
                os.system(sqlmap_komut)
                print("\n")
                bosluk_kacis_silme(yazılım,sqlmap_komut)
        except:
            print(">>>>> Geçersiz Girdi!!!")

def wpscan():
    print(Fore.YELLOW)
    os.system("figlet WPSCAN")
    print(Fore.RESET)
    while True:
        wpscan_komut = input(str("Komutu giriniz (Önceki adıma dönmek için 'g' ya da '1' basınız): "))
        print("\n")
        yazılım = "wpscan"
        try:
            if wpscan_komut == '1' or wpscan_komut == 'g':
                time.sleep(0.5)
                print("\n")
                break;
            elif wpscan_komut == "wpscan -h" or wpscan_komut == "wpscan --hh":
                os.system(wpscan_komut)
            else:
                os.system(wpscan_komut)
                print("\n")
                bosluk_kacis_silme(yazılım,wpscan_komut)
        except:
            print(">>>>> Geçersiz Girdi!!!")

def enum4linux():
    print(Fore.YELLOW)
    os.system("figlet ENUM4LINUX")
    print(Fore.RESET)
    while True:
        enum4lilnux_komut = input(str("Komutu giriniz (Önceki adıma dönmek için 'g' ya da '1' basınız): "))
        print("\n")
        yazılım = "enum4linux"
        try:
            if enum4lilnux_komut == '1' or enum4lilnux_komut == 'g':
                time.sleep(0.5)
                print("\n")
                break;
            elif enum4lilnux_komut == "enum4linux -h" or enum4lilnux_komut == "enum4linux --hh" or enum4lilnux_komut == "enum4linux --help":
                os.system(enum4lilnux_komut)
            else:
                os.system(enum4lilnux_komut)
                print("\n")
                bosluk_kacis_silme(yazılım,enum4lilnux_komut)
        except:
            print(">>>>> Geçersiz Girdi!!!")

def smbclient():
    print(Fore.YELLOW)
    os.system("figlet SMBCLIENT")
    print(Fore.RESET)
    while True:
        smbclient_komut = input(str("Komutu giriniz (Önceki adıma dönmek için 'g' ya da '1' basınız): "))
        print("\n")
        yazılım = "smbclient"
        try:
            if smbclient_komut == '1' or smbclient_komut == 'g':
                time.sleep(0.5)
                print("\n")
                break;
            elif smbclient_komut == "smbclient --help" or smbclient_komut == "enum4linux -h" or smbclient_komut == "enum4linux -?":
                os.system(smbclient_komut)
            else:
                os.system(smbclient_komut)
                print("\n")
                bosluk_kacis_silme(yazılım, smbclient_komut)
        except:
            print(">>>>> Geçersiz Girdi!!!")

def wafw00f():
    while True:
        print(Fore.YELLOW)
        os.system("figlet WAFW00F")
        print(Fore.RESET)
        print("""
        1) Standart Tarama
        2) Özel Tarama
        3) Önceki adım\n""")
        wafw00f_sec = input(str("Seçmek istediğiniz tarama türü (Önceki adıma dönmek için '3' ya da 'g' basınız): "))
        print("\n")
        try:
            if wafw00f_sec == '1':
                wafw00f_hedefurl = input(str("Hedef URL'yi giriniz: "))
                regularurl = wafw00f_hedefurl.replace("/","")
                os.system("wafw00f " + wafw00f_hedefurl + "| tee report/WAFW00F_" + regularurl + ".txt")
                print("\n")
                print(">>>>>Tarama sonucu report dosyasına WAFW00F_" + regularurl + ".txt şeklinde kaydedilmiştir.")
                time.sleep(0.8)
            elif wafw00f_sec == '2':
                yazılım = "wafw00f"

                wafw00f_komut = input(str("Komutu giriniz: "))
                if wafw00f_komut == "wafw00f" or wafw00f_komut == "wafw00f -h" or wafw00f_komut == "wafw00f --help":
                    os.system(wafw00f_komut)
                    print("\n")
                else:
                    os.system(wafw00f_komut)
                    print("\n")
                    bosluk_kacis_silme(yazılım,wafw00f_komut)

            elif wafw00f_sec == '3' or wafw00f_sec == 'g':
                time.sleep(0.5)
                print("\n")
                break;
            else:
                print(">>>>> Geçersiz girdi!!!")
        except:
            print(">>>>> Geçersiz girdi!!!")

def recon():

    while True:
        print(Fore.YELLOW)
        os.system("figlet KESIF")
        print(Fore.RESET)

        secim = input(str("""Reconnaissance(Keşif) adımını seçtiniz.
        
        1) Pasif Keşif
        2) Aktif Keşif
        3) Önceki adıma dönmek için 'g ya da 3' basınız.
        
    Keşif türünü seçiniz: """))
        print("\n")
        time.sleep(0.2)
        if (secim == '1'):
            time.sleep(0.2)
            pasif_tool()
        elif (secim == '2'):
            time.sleep(0.2)
            aktif_tool()
        elif (secim == 'g' or secim == '3'):
            time.sleep(0.2)
            break;
        else:
            print(">>>>>Geçersiz girdi!!!")
            print("\n")
            time.sleep(0.5)
recon()




